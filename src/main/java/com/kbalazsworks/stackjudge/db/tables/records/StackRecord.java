/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.stackjudge.db.tables.records;


import com.kbalazsworks.stackjudge.db.tables.Stack;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StackRecord extends UpdatableRecordImpl<StackRecord> implements Record8<Long, Long, Long, Short, String, Short, LocalDateTime, Long> {

    private static final long serialVersionUID = 1766961367;

    /**
     * Setter for <code>public.stack.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.stack.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.stack.company_id</code>.
     */
    public void setCompanyId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.stack.company_id</code>.
     */
    public Long getCompanyId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.stack.parent_id</code>.
     */
    public void setParentId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.stack.parent_id</code>.
     */
    public Long getParentId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.stack.type_id</code>.
     */
    public void setTypeId(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.stack.type_id</code>.
     */
    public Short getTypeId() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>public.stack.name</code>.
     */
    public void setName(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.stack.name</code>.
     */
    public String getName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.stack.members_on_stack_id</code>.
     */
    public void setMembersOnStackId(Short value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.stack.members_on_stack_id</code>.
     */
    public Short getMembersOnStackId() {
        return (Short) get(5);
    }

    /**
     * Setter for <code>public.stack.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.stack.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.stack.created_by</code>.
     */
    public void setCreatedBy(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.stack.created_by</code>.
     */
    public Long getCreatedBy() {
        return (Long) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Long, Short, String, Short, LocalDateTime, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Long, Long, Short, String, Short, LocalDateTime, Long> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Stack.STACK.ID;
    }

    @Override
    public Field<Long> field2() {
        return Stack.STACK.COMPANY_ID;
    }

    @Override
    public Field<Long> field3() {
        return Stack.STACK.PARENT_ID;
    }

    @Override
    public Field<Short> field4() {
        return Stack.STACK.TYPE_ID;
    }

    @Override
    public Field<String> field5() {
        return Stack.STACK.NAME;
    }

    @Override
    public Field<Short> field6() {
        return Stack.STACK.MEMBERS_ON_STACK_ID;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Stack.STACK.CREATED_AT;
    }

    @Override
    public Field<Long> field8() {
        return Stack.STACK.CREATED_BY;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getCompanyId();
    }

    @Override
    public Long component3() {
        return getParentId();
    }

    @Override
    public Short component4() {
        return getTypeId();
    }

    @Override
    public String component5() {
        return getName();
    }

    @Override
    public Short component6() {
        return getMembersOnStackId();
    }

    @Override
    public LocalDateTime component7() {
        return getCreatedAt();
    }

    @Override
    public Long component8() {
        return getCreatedBy();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getCompanyId();
    }

    @Override
    public Long value3() {
        return getParentId();
    }

    @Override
    public Short value4() {
        return getTypeId();
    }

    @Override
    public String value5() {
        return getName();
    }

    @Override
    public Short value6() {
        return getMembersOnStackId();
    }

    @Override
    public LocalDateTime value7() {
        return getCreatedAt();
    }

    @Override
    public Long value8() {
        return getCreatedBy();
    }

    @Override
    public StackRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public StackRecord value2(Long value) {
        setCompanyId(value);
        return this;
    }

    @Override
    public StackRecord value3(Long value) {
        setParentId(value);
        return this;
    }

    @Override
    public StackRecord value4(Short value) {
        setTypeId(value);
        return this;
    }

    @Override
    public StackRecord value5(String value) {
        setName(value);
        return this;
    }

    @Override
    public StackRecord value6(Short value) {
        setMembersOnStackId(value);
        return this;
    }

    @Override
    public StackRecord value7(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public StackRecord value8(Long value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public StackRecord values(Long value1, Long value2, Long value3, Short value4, String value5, Short value6, LocalDateTime value7, Long value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StackRecord
     */
    public StackRecord() {
        super(Stack.STACK);
    }

    /**
     * Create a detached, initialised StackRecord
     */
    public StackRecord(Long id, Long companyId, Long parentId, Short typeId, String name, Short membersOnStackId, LocalDateTime createdAt, Long createdBy) {
        super(Stack.STACK);

        set(0, id);
        set(1, companyId);
        set(2, parentId);
        set(3, typeId);
        set(4, name);
        set(5, membersOnStackId);
        set(6, createdAt);
        set(7, createdBy);
    }
}
