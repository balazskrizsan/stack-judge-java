/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.stackjudge.db.tables;


import com.kbalazsworks.stackjudge.db.Keys;
import com.kbalazsworks.stackjudge.db.Public;
import com.kbalazsworks.stackjudge.db.tables.records.StackRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Stack extends TableImpl<StackRecord> {

    private static final long serialVersionUID = 477563157;

    /**
     * The reference instance of <code>public.stack</code>
     */
    public static final Stack STACK = new Stack();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StackRecord> getRecordType() {
        return StackRecord.class;
    }

    /**
     * The column <code>public.stack.id</code>.
     */
    public final TableField<StackRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('stack_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.stack.company_id</code>.
     */
    public final TableField<StackRecord, Long> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.stack.parent_id</code>.
     */
    public final TableField<StackRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.stack.type_id</code>.
     */
    public final TableField<StackRecord, Short> TYPE_ID = createField(DSL.name("type_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.stack.name</code>.
     */
    public final TableField<StackRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.stack.members_on_stack_id</code>.
     */
    public final TableField<StackRecord, Short> MEMBERS_ON_STACK_ID = createField(DSL.name("members_on_stack_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.stack.created_at</code>.
     */
    public final TableField<StackRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.stack.created_by</code>.
     */
    public final TableField<StackRecord, Long> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.stack</code> table reference
     */
    public Stack() {
        this(DSL.name("stack"), null);
    }

    /**
     * Create an aliased <code>public.stack</code> table reference
     */
    public Stack(String alias) {
        this(DSL.name(alias), STACK);
    }

    /**
     * Create an aliased <code>public.stack</code> table reference
     */
    public Stack(Name alias) {
        this(alias, STACK);
    }

    private Stack(Name alias, Table<StackRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stack(Name alias, Table<StackRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Stack(Table<O> child, ForeignKey<O, StackRecord> key) {
        super(child, key, STACK);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<StackRecord, Long> getIdentity() {
        return Keys.IDENTITY_STACK;
    }

    @Override
    public UniqueKey<StackRecord> getPrimaryKey() {
        return Keys.STACK_PK;
    }

    @Override
    public List<UniqueKey<StackRecord>> getKeys() {
        return Arrays.<UniqueKey<StackRecord>>asList(Keys.STACK_PK);
    }

    @Override
    public List<ForeignKey<StackRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StackRecord, ?>>asList(Keys.STACK__FK__STACK_COMPANY_ID__COMPANY_ID__ON_DELETE_CASCADE, Keys.STACK__FK__STACK_PARENT_ID__STACK_ID__ON_DELETE_CASCADE);
    }

    public Company company() {
        return new Company(this, Keys.STACK__FK__STACK_COMPANY_ID__COMPANY_ID__ON_DELETE_CASCADE);
    }

    public Stack stack() {
        return new Stack(this, Keys.STACK__FK__STACK_PARENT_ID__STACK_ID__ON_DELETE_CASCADE);
    }

    @Override
    public Stack as(String alias) {
        return new Stack(DSL.name(alias), this);
    }

    @Override
    public Stack as(Name alias) {
        return new Stack(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stack rename(String name) {
        return new Stack(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stack rename(Name name) {
        return new Stack(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Long, Short, String, Short, LocalDateTime, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
