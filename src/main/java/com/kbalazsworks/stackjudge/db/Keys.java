/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.stackjudge.db;


import com.kbalazsworks.stackjudge.db.tables.Address;
import com.kbalazsworks.stackjudge.db.tables.Company;
import com.kbalazsworks.stackjudge.db.tables.FlywaySchemaHistory;
import com.kbalazsworks.stackjudge.db.tables.Stack;
import com.kbalazsworks.stackjudge.db.tables.records.AddressRecord;
import com.kbalazsworks.stackjudge.db.tables.records.CompanyRecord;
import com.kbalazsworks.stackjudge.db.tables.records.FlywaySchemaHistoryRecord;
import com.kbalazsworks.stackjudge.db.tables.records.StackRecord;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AddressRecord, Long> IDENTITY_ADDRESS = Identities0.IDENTITY_ADDRESS;
    public static final Identity<CompanyRecord, Long> IDENTITY_COMPANY = Identities0.IDENTITY_COMPANY;
    public static final Identity<StackRecord, Long> IDENTITY_STACK = Identities0.IDENTITY_STACK;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CompanyRecord> COMPANY_PK = UniqueKeys0.COMPANY_PK;
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = UniqueKeys0.FLYWAY_SCHEMA_HISTORY_PK;
    public static final UniqueKey<StackRecord> STACK_PK = UniqueKeys0.STACK_PK;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AddressRecord, CompanyRecord> ADDRESS__FK__ADDRESS_COMPANY_ID__COMPANY_ID__ON_DELETE_CASCADE = ForeignKeys0.ADDRESS__FK__ADDRESS_COMPANY_ID__COMPANY_ID__ON_DELETE_CASCADE;
    public static final ForeignKey<StackRecord, CompanyRecord> STACK__FK__STACK_COMPANY_ID__COMPANY_ID__ON_DELETE_CASCADE = ForeignKeys0.STACK__FK__STACK_COMPANY_ID__COMPANY_ID__ON_DELETE_CASCADE;
    public static final ForeignKey<StackRecord, StackRecord> STACK__FK__STACK_PARENT_ID__STACK_ID__ON_DELETE_CASCADE = ForeignKeys0.STACK__FK__STACK_PARENT_ID__STACK_ID__ON_DELETE_CASCADE;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<AddressRecord, Long> IDENTITY_ADDRESS = Internal.createIdentity(Address.ADDRESS, Address.ADDRESS.ID);
        public static Identity<CompanyRecord, Long> IDENTITY_COMPANY = Internal.createIdentity(Company.COMPANY, Company.COMPANY.ID);
        public static Identity<StackRecord, Long> IDENTITY_STACK = Internal.createIdentity(Stack.STACK, Stack.STACK.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<CompanyRecord> COMPANY_PK = Internal.createUniqueKey(Company.COMPANY, "company_pk", new TableField[] { Company.COMPANY.ID }, true);
        public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, "flyway_schema_history_pk", new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
        public static final UniqueKey<StackRecord> STACK_PK = Internal.createUniqueKey(Stack.STACK, "stack_pk", new TableField[] { Stack.STACK.ID }, true);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<AddressRecord, CompanyRecord> ADDRESS__FK__ADDRESS_COMPANY_ID__COMPANY_ID__ON_DELETE_CASCADE = Internal.createForeignKey(Keys.COMPANY_PK, Address.ADDRESS, "fk__address_company_id__company_id__on_delete_cascade", new TableField[] { Address.ADDRESS.COMPANY_ID }, true);
        public static final ForeignKey<StackRecord, CompanyRecord> STACK__FK__STACK_COMPANY_ID__COMPANY_ID__ON_DELETE_CASCADE = Internal.createForeignKey(Keys.COMPANY_PK, Stack.STACK, "fk__stack_company_id__company_id__on_delete_cascade", new TableField[] { Stack.STACK.COMPANY_ID }, true);
        public static final ForeignKey<StackRecord, StackRecord> STACK__FK__STACK_PARENT_ID__STACK_ID__ON_DELETE_CASCADE = Internal.createForeignKey(Keys.STACK_PK, Stack.STACK, "fk__stack_parent_id__stack_id__on_delete_cascade", new TableField[] { Stack.STACK.PARENT_ID }, true);
    }
}
